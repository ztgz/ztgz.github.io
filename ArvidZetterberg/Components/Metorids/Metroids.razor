@using ArvidZetterberg.Components.Metorids.Extensions
@implements IDisposable

<div class="background"> 
	<div class="camera">
		@foreach (var core in items)
		{
			@if (core is EnemyCore)
			{
				<Enemy Core="@((EnemyCore)core)" />
			}
			else if (core is SpawnCore)
			{	
				<Spawn Core="@((SpawnCore)core)" />
			}
			else if (core is ItemCore)
			{
				<Item Core="@((ItemCore)core)" />
			}
		}
		@if (paused || gameOver)
		{
			<div class="paused">
				<div class="paused-content">
					@if (gameOver)
					{
						<h2>Game over</h2>
						<h3>Final score: @score points</h3>
						<h3>Click on screen to start</h3>
					}
					else
					{
						<h2>Game paused</h2>
						<h3>Click on screen to start</h3>
						<h3>Move the red dot with arrow keys, avoid obstacles and save the astronauts</h3>
					}
				</div>
			</div>
		}
		<Hud Core="shipCore" Score="score" />
		<Ship Core="shipCore" />
	</div>
	<input class="input-box" type="text" 
		@onkeydown="KeyPressed" 
		@onkeyup="KeyUp" 
		@onblur="HandleBlur"
		@onclick="HandleClick"/>
</div>

@code {
	GameLoop gameLoop = null!;
	ShipCore shipCore = new();
	List<object> items = new List<object>() {
		new SpawnCore(100, 100),
	};
	bool paused = true;
	bool gameOver = false;
	int score = 0;

	protected override Task OnInitializedAsync()
	{
		IPosition.ScreenHeight = 590;
		IPosition.ScreenWidth = 790;

		gameLoop = new();
		gameLoop.AddToUpdate(OnUpdate);
		return base.OnInitializedAsync();
	}

	void OnUpdate(double elapsedMilliseconds)
	{
		if (paused)
			return;

		SetShipDirections();
		shipCore.Update(elapsedMilliseconds);
		for (int i  = items.Count() -1; i >= 0; i--)
		{
			var core = items[i];

			if (core is IUpdate)
				((IUpdate)core).Update(elapsedMilliseconds);

			if (core is (IPosition and ICollision) && ICollision.IsCollision(core, shipCore))
			{
				var collision = core as ICollision;
				collision.HandleCollision(shipCore.Damage);
				shipCore.HandleCollision(collision.Damage);
				score += collision.Value;
			}

			var removable = core as IRemovable;
			if (removable is not null && removable.ShallBeRemoved())
			{
				items.AddRange(removable.ShallBeCreatedOnRemove());
				items.RemoveAt(i);
			}
		}

		if (!gameOver && shipCore.CurrentLife == 0)
		{
			paused = true;
			gameOver = true;
		}

		InvokeAsync(StateHasChanged);
	}


	// TODO MOVE KEY LOGIC SOMEWHERE ELSE
	bool downPressed = false;
	bool upPressed = false;
	bool leftPressed = false;
	bool rightPressed = false;

	void KeyPressed(KeyboardEventArgs eventArgs)
	{
		if (eventArgs.Key == "ArrowDown")
			downPressed = true;
		if (eventArgs.Key == "ArrowUp")
			upPressed = true;
		if (eventArgs.Key == "ArrowLeft")
			leftPressed = true;
		if (eventArgs.Key == "ArrowRight")
			rightPressed = true;
	}

	void KeyUp(KeyboardEventArgs eventArgs)
	{
		if (eventArgs.Key == "ArrowDown")
			downPressed = false;
		if (eventArgs.Key == "ArrowUp")
			upPressed = false;
		if (eventArgs.Key == "ArrowLeft")
			leftPressed = false;
		if (eventArgs.Key == "ArrowRight")
			rightPressed = false;	
	}

	void HandleBlur()
	{
		paused = true;
		downPressed = false;
		upPressed = false;
		rightPressed = false;
		leftPressed = false;
	}

	void HandleClick()
	{
		if (gameOver)
		{
			items.Clear();
			items.Add(new SpawnCore(100, 100));
			shipCore = new();
			gameOver = false;
			score = 0;
		}
		
		paused = false;
	}

	void SetShipDirections()
	{
		shipCore.SetYDirection((downPressed, upPressed) switch
		{
			(true, false) => ShipCore.YDirection.Down,
			(false, true) => ShipCore.YDirection.Up,
			_ => ShipCore.YDirection.None
		});

		shipCore.SetXDirection((leftPressed, rightPressed) switch
		{
			(true, false) => ShipCore.XDirection.Left,
			(false, true) => ShipCore.XDirection.Right,
			_ => ShipCore.XDirection.None
		});
	}

	public void Dispose()
	{
		gameLoop.RemoveFromUpdate(OnUpdate);
		gameLoop.Dispose();
	}
}
