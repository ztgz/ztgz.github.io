@inject WindowStore WindowStore
@inject WindowMessageService WindowMessageService
@implements IDisposable

@if (visible)
{
	<div class="noselect window"
	 style=@($@"{CalculateY()};
	 {CalculateX()};
	 z-index: {WindowContainer.GetZIndex(this)};
	 {CalculateWidth()};
	 {CalculateHeight()}")
	 @onclick="SelectWindow">
		<div class="window-drag-bar"
		 draggable="true"
		 @ondrag="HandleDrag"
		 @ondragstart="HandleDragStart">
		</div>
		<div class="window-bar">
			<span>@Content.Name</span>
		</div>
		<div class="window-content">
			@if (Content is not null)
			{
				<DynamicComponent Type="@Content.type" Parameters="@Content.parameters" />
			}
		</div>
		<div class="window-icons">
			<i class="fas fa-window-minimize fa-lg" alt="Mimimize window" @onclick="@(MinimizeWindow)"></i>
			<i class="far @(maximized ? "fa-window-restore" : "fa-window-maximize") fa-lg" alt="Maximize window" @onclick="@(() => maximized = !maximized)"></i>
			<i class="fas fa-window-close fa-lg" alt="Close window button" @onclick="HandleClose"></i>
		</div>
		<div class="window-resize-y" draggable="true" @ondrag="@((DragEventArgs args) => ResizeWindow(args, resizeY: true, isStart: false))"></div>
		<div class="window-resize-x" draggable="true" @ondrag="@((DragEventArgs args) => ResizeWindow(args, resizeX: true, isStart: false))"></div>
		<div class="window-resize-y-min" draggable="true" @ondrag="@((DragEventArgs args) => ResizeWindow(args, resizeY: true, isStart: true))"></div>
		<div class="window-resize-x-min" draggable="true" @ondrag="@((DragEventArgs args) => ResizeWindow(args, resizeX: true, isStart: true))"></div>
		<div class="window-resize" draggable="true" @ondrag="HandleResizeXAndY"></div>
	</div>
}

@code {
	[Parameter]
	[EditorRequired]
	public WindowContent Content { get; set; } = null!;

	[CascadingParameter]
	public WindowContainer WindowContainer { get; set; } = null!;

	double left;
	double top;
	double width;
	double height;

	double mouseOffsetX = 0;
	double mouseOffsetY = 0;
	bool maximized = false;
	bool visible = true;

	protected override void OnInitialized()
	{
		left = Content.StartMeasuers.Left;
		top = Content.StartMeasuers.Top;
		width = Content.StartMeasuers.Width;
		height = Content.StartMeasuers.Height;

		maximized = WindowStore.IsMobile;

		WindowContainer.AddWindow(this);
		WindowMessageService.Subscribe(HandleMessages);
		base.OnInitialized();
	}

	void HandleMessages(WindowMessage msg)
	{
		if (msg is FocusWindowMsg && msg.WindowContent.Id == Content.Id)
			visible = true;
	}

	void HandleDrag(DragEventArgs eventArgs)
	{
		if (IsDragFinished(eventArgs) == false)
		{
			left = eventArgs.PageX - mouseOffsetX;
			top = eventArgs.PageY - mouseOffsetY;
		}
	}

	void HandleDragStart(DragEventArgs eventArgs)
	{
		SelectWindow();
		mouseOffsetX = eventArgs.OffsetX;
		mouseOffsetY = eventArgs.OffsetY;
	}

	void SelectWindow() => WindowMessageService.FocusWindow(Content);

	#region ResizeWindow
	void HandleResizeXAndY(DragEventArgs eventArgs) => ResizeWindow(eventArgs, true, true);
	void ResizeWindow(DragEventArgs eventArgs, bool resizeX = false, bool resizeY = false, bool isStart = false)
	{
		if (IsDragFinished(eventArgs))
			return;

		if (resizeX)
			ResizeX(eventArgs, isStart);

		if (resizeY)
			ResizeY(eventArgs, isStart);
	
		SelectWindow();		
	}

	void ResizeX(DragEventArgs eventArgs, bool resizeLeft = false)
	{
		width += (resizeLeft ? -eventArgs.OffsetX : eventArgs.OffsetX);

		if (width < 200)
			width = 200;
		else if (resizeLeft)
			left += eventArgs.OffsetX;
	}

	void ResizeY(DragEventArgs eventArgs, bool resizeTop = false)
	{
		height += (resizeTop ? -eventArgs.OffsetY : eventArgs.OffsetY);

		if (height < 120)
			height = 120;
		else if (resizeTop)
			top += eventArgs.OffsetY;
	}
	#endregion

	void HandleClose()
	{
		WindowMessageService.RemoveWidnow(Content);
		WindowStore.RemoveWindow(Content);
	}

	void MinimizeWindow()
	{
		visible = false;
		if (WindowStore.SelectedWindow == this)
			WindowStore.SelectedWindow = null;
	}

	private string CalculateX() => maximized ? "left: 0" : "left: " + left + "px";
	private string CalculateY() => maximized ? "top: 0" : "top: " + top + "px";
	private string CalculateWidth() => "width:" + (maximized ? "calc(100% - 1px)" : (width + "px"));
	private string CalculateHeight() => "height:" + (maximized ? "calc(100% - 52px)" : (height + "px"));

	bool IsDragFinished(DragEventArgs eventArgs) => eventArgs.PageX == 0 && eventArgs.PageY == 0; // Navie solution

	public void Dispose() => WindowMessageService.Unsubscribe(HandleMessages);
}