@inject WindowStore WindowStore
@inject WindowMessageService WindowMessageService
@implements IDisposable

<CascadingValue Value="this">
	@ChildContent
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	private List<(Window window, int zIndex)> Windows { get; set; } = new();

	protected override void OnInitialized() => WindowMessageService.Subscribe(HandleWindowMessages);

	private int zIndex = 100000;
	public void AddWindow(Window window)
	{
		zIndex++;
		Windows.Add((window, zIndex));
		WindowStore.SelectedWindow = window;
	}

	public int GetZIndex(Window window) => Windows.FirstOrDefault(w => w.window == window).zIndex;

	void HandleWindowMessages(WindowMessage message)
	{
		if (message is FocusWindowMsg)
			FocusOnWindow(message.WindowContent);
		else if (message is RemoveWindowMsg)
			RemoveWindow(message.WindowContent);
		
		StateHasChanged();
	}

	void FocusOnWindow(WindowContent content)
	{
		var selected = Windows.FirstOrDefault(w => w.window.Content == content);

		// Set window as selected
		WindowStore.SelectedWindow = selected.window;

		// If current window has heighest z-value, dont adjust z-indexies, 
		// zIndex of 0 equals no value found, 
		if (selected.zIndex == 0 || selected.zIndex == zIndex)
			return;

		try
		{
			// Adjust z-idexies
			for(int i = Windows.Count() - 1; i >= 0; i--)
			{
				var target = Windows[i];
				if (target.window == selected.window)
					Windows[i] = new(target.window, zIndex);
				else if (Windows[i].zIndex >= selected.zIndex)
					Windows[i] = new(target.window, Windows[i].zIndex - 1);
			}

			// Set window as selected
			WindowStore.SelectedWindow = selected.window;
		}
		catch { }
	}

	void RemoveWindow(WindowContent content)
	{
		try
		{
			// If current window has heighest z-value, dont adjust z-indexies, 
			// zIndex of 0 equals no value found
			var selected = Windows.FirstOrDefault(w => w.window.Content == content && w.zIndex != zIndex);
			if (selected.zIndex == 0)
				return;

			// Adjust z-idexies
			for(int i = Windows.Count() - 1; i >= 0; i--)
			{
				var target = Windows[i];
				if (target.window == selected.window)
					Windows.RemoveAt(i);
				else if (Windows[i].zIndex >= selected.zIndex)
					Windows[i] = new(target.window, Windows[i].zIndex - 1);
			}

			if (WindowStore.SelectedWindow == selected.window)
				WindowStore.SelectedWindow = null;
		} 
		catch {}
	}

	public void Dispose() => WindowMessageService.Unsubscribe(HandleWindowMessages);
}
