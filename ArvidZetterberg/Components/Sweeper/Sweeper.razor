<div class="board" @key=@($"itteration-{iteration}")>
	@if (gameState == GameState.Settings)
	{
		<Settings OnSettingsChanged="HandleSettingsChanged"/>
	}
	else 
	{
		@if (gameState == GameState.Victory)
		{
			<SweeperVictoryScreen />
		}
		<SweeperMenu OnNewClick="SetupGame" 
			IsGameOver="gameState == GameState.GameOver"
			IsRunning="gameState == GameState.Playing" 
			OnSettingsClicked="() => gameState = GameState.Settings"/>

		@for (int y = 0; y < sizeY; y++)
		{
			<div class="row">
				@for (int x = 0; x < sizeX; x++)
				{
					int currentX = x;
					int currentY = y;
					<Tile Related="tiles[y,x]" 
						Visible="visible[y,x]"
						Disabled="gameState != GameState.Playing"
						OnClick="() => { OpenTile(currentY, currentX); }"
						/>
				}
			</div>
		}
	}
</div>

@code {
	private int sizeX = 10;
	private int sizeY = 10;
	private int[,] tiles = null!;
	private bool[,] visible = null!;

	private int avaialbeTrash = 10;
	private GameState gameState;
	int iteration = 0;
	public const int TRASH = -1;
	Random random = new Random(DateTime.UtcNow.Millisecond * DateTime.UtcNow.Second);

	protected override void OnInitialized() => SetupGame();

	void SetupGame()
	{
		iteration++;
		ResetGrids();
		RandomizeBoard();
		SetBoardValues();
		gameState = GameState.Playing;
	}

	void RandomizeBoard()
	{
		int placed = 0;
		do
		{
			int x = random.Next(0, sizeX);
			int y = random.Next(0, sizeY);
			if (tiles[y,x] == 0)
			{
				tiles[y, x] = TRASH;
				placed++;
			}
		} while (placed < avaialbeTrash);
	}

	void ResetGrids()
	{
		tiles = new int[sizeY, sizeX];
		visible = new bool[sizeY, sizeX];
	}

	void SetBoardValues()
	{
		LoopTroughBoard((int y, int x) =>
		{
			if (tiles[y ,x] != TRASH)
				tiles[y, x] = GetNearbyTrash(y, x);
		});
	}

	int GetNearbyTrash(int y, int x)
	{
		int count = 0;
		for (int sY = y - 1; sY <= y + 1; sY++)
			for (int sX = x - 1; sX <= x + 1; sX++)
				if (isValidTile(sY, sX) && tiles[sY, sX] == TRASH)
					count++;

		return count;

		bool isValidTile(int cY, int cX) => IsInsideBoardX(cX) && IsInsideBoardY(cY) && isNotTarget(cY, cX);
		bool isNotTarget(int cY, int cX) => cY != y || cX != x;
	}

	void OpenTile(int y, int x)
	{
		visible[y, x] = true;
		if (tiles[y, x] == TRASH)
		{
			gameState = GameState.GameOver;
		}
		else
		{
			if (tiles[y, x] == 0)
			{
				OpenRelatedTiles(y, x);
			}
			CheckForVictory();
		}
	}

	bool IsInsideBoardY(int cY) => cY >= 0 && cY < sizeY;
	bool IsInsideBoardX(int cX) => cX >= 0 && cX < sizeX;

	void OpenRelatedTiles(int y, int x)
	{
		for (int sY = y - 1; sY <= y + 1; sY++)
			for (int sX = x - 1; sX <= x + 1; sX++)
				if (IsInsideBoardX(sX) && IsInsideBoardY(sY) && !visible[sY, sX])
				{
					var value = tiles[sY, sX];
					if (value != TRASH)
						visible[sY, sX] = true;
					if (value == 0)
						OpenRelatedTiles(sY, sX);
				}
	}

	void CheckForVictory()
	{
		int hiddenTiles = 0;
		LoopTroughBoard((int y, int x) =>
		{
			if (visible[y, x] == false)
				hiddenTiles++;
		});

		if (hiddenTiles == avaialbeTrash)
		{
			gameState = GameState.Victory;
			Console.WriteLine("Victory");
		}
	}

	void HandleSettingsChanged(Settings.SweeperSetting newSettings)
	{
		sizeY = newSettings.sizeY;
		sizeX = newSettings.sizeX;
		avaialbeTrash = newSettings.trashCount;
		SetupGame();
	}

	/// <summary>
	/// Loop trough all tiles positions on the board
	/// </summary>
	/// <param name="action">First int parameter is the y position, second int prameter is the x position</param>
	void LoopTroughBoard(Action<int, int> action)
	{
		for (int y = 0; y < sizeY; y++)
			for (int x = 0; x < sizeX; x++)
				action.Invoke(y, x);
	}

	enum GameState
	{
		Playing,
		GameOver,
		Victory,
		Settings
	}
}
