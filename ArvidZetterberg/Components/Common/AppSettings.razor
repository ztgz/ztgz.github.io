@inject SettingsStore SettingsStore
@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<div class="app-settings">
    <h3>Choose app colors</h3>
    <div>
        <input type="color" value="@SettingsStore.BackgroundColor" @oninput="ChangeBackgroundColor" />
        <label>Background color</label>
    </div>
    <div>
        <input type="color" value="@SettingsStore.IconColor" @oninput="ChangeIconColor" />
        <label>Icon color</label>
    </div>
    <div>
        <input type="color" value="@SettingsStore.TextColor" @oninput="ChangeTextColor" />
        <label>Default text color</label>
    </div>
    <div>
        <input type="color" value="@SettingsStore.WindowColor" @oninput="ChangeWindowColor"/>
        <label>Window color</label>
    </div>
    <div>
        <input type="color" value="@SettingsStore.WindowFontColor" @oninput="ChangeWindowFontColor" />
        <label>Window font color</label>
    </div>    
    <div>
        <input type="color" value="@SettingsStore.WindowContentBackgroundColor" @oninput="ChangeWindowContentColor" />
        <label>Window background color</label>
    </div>    
    <div>
        <input type="color" value="@SettingsStore.ToolbarColor" @oninput="ChangeToolbarColor" />
        <label>Toolbar color</label>
    </div>
    @if (cookiesWasAccepted == false)
    {
        <p class="cookie-text">To save colors for use in the future, necessary  data needs to be saved in a cookie.</p>
        <div class="cookie-consent">
            <input type="checkbox" @bind-value="allowCookies" />
            <label>Allow necessary data to be stored in a cookie</label>
        </div>
    }
    <button class="save-button" @onclick="Save" disabled="@(!allowCookies)">SAVE</button>
</div>

@code {
    private IJSObjectReference? module;
    private bool allowCookies = false;
    private bool cookiesWasAccepted = false;
    protected override async Task OnInitializedAsync()
    {
        module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/localstorage.js");
        allowCookies = cookiesWasAccepted = (await module.InvokeAsync<string?>("getFromLocalStorage", "allow-cookie")) == "true"; 
        await base.OnInitializedAsync();
    }

    async Task<string> LoadColor(string key, string defaultValue)
    {
        if (module is not null)
        {
            var value = await module.InvokeAsync<string?>("getFromLocalStorage", key);
            if (value is not null)
                return value;
        }
        return defaultValue;
    }

    void ChangeWindowColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.WindowColor = color;
    }

    void ChangeWindowFontColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.WindowFontColor = color;
    }

    void ChangeWindowContentColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.WindowContentBackgroundColor = color;
    }

    void ChangeBackgroundColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.BackgroundColor = color;
    }

    void ChangeIconColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.IconColor = color;
    }    

    void ChangeTextColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.TextColor = color;
    }    

    void ChangeToolbarColor(ChangeEventArgs eventArgs)
    {
        var color = eventArgs.Value as string;
        if (color is not null)
            SettingsStore.ToolbarColor = color;
    }

    public async Task Save()
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("setToLocalStorage", "allow-cookie", true);
            await module.InvokeVoidAsync("setToLocalStorage", "background", SettingsStore.BackgroundColor);
            await module.InvokeVoidAsync("setToLocalStorage", "icon-color", SettingsStore.IconColor);
            await module.InvokeVoidAsync("setToLocalStorage", "text-color", SettingsStore.TextColor);
            await module.InvokeVoidAsync("setToLocalStorage", "window-color", SettingsStore.WindowColor);
            await module.InvokeVoidAsync("setToLocalStorage", "window-font-color", SettingsStore.WindowFontColor);
            await module.InvokeVoidAsync("setToLocalStorage", "window-content-background-color", SettingsStore.WindowContentBackgroundColor);
            await module.InvokeVoidAsync("setToLocalStorage", "toolbar-color", SettingsStore.ToolbarColor);
            cookiesWasAccepted = true;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
            await module.DisposeAsync();
    }
}
